import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-YigGP9IL.js";const p={},e=t(`<h3 id="效果综述" tabindex="-1"><a class="header-anchor" href="#效果综述"><span>效果综述</span></a></h3><p>目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 <code>890 Attachments</code> 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是<strong>方便跨文件引用以及安全隐私</strong>。但存在的弊端也很明显：<strong>随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦</strong>。这时可以考虑 webp 化或者干脆直接图床化。</p><p>刚好有朋友遇到这个问题，需要将 Vault 里的全部本地图片转为图床链接，解决思路的话比较清晰，相信大家都能想得到：</p><ol><li>上传全部图片到图床；</li><li>替换文件引用链接。</li></ol><p>那就以一个示例文件夹 <code>ob</code> 为例，尝试实现所有图片的图床化。</p><h3 id="上传图片" tabindex="-1"><a class="header-anchor" href="#上传图片"><span>上传图片</span></a></h3><p>这里我们需要借助一个插件：[[Image auto upload]]，可以将图片上传到 PicGo 中配置的图床。</p><figure><img src="https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>若勾选最后一个选项，图片上传图床后会被删除！！！</p><p>虽然插件只能上传一个文件中的所有图像文件，但也足够让我们打开思路了：<strong>那就把图片都丢到一个文件里</strong>！</p><p>文件夹内创建文件 <code>attachments.md</code>，运行这段 python 脚本：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> os
 <span class="token keyword">import</span> glob
 ​
 <span class="token comment"># 获取当前目录</span>
 current_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
 <span class="token comment"># 获取所有图片文件路径</span>
 image_files <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \\
               glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.jpeg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \\
               glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可根据需要添加其他图片格式的glob语句</span>
 ​
 <span class="token comment"># 遍历图片文件，并将文件名添加到attachments.md文件中</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;attachments.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
     <span class="token keyword">for</span> image_file <span class="token keyword">in</span> image_files<span class="token punctuation">:</span>
         image_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span>
         <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;![[</span><span class="token interpolation"><span class="token punctuation">{</span>image_filename<span class="token punctuation">}</span></span><span class="token string">]]\\n&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后会得到以下效果：</p><figure><img src="https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图片汇总</p><p>然后回到 Obsidian 按 <code>Ctrl-P</code> 调出命令面板，执行 <code>Image auto upload Plugin: Upload all images</code> 后会自动替换成图床链接：</p><figure><img src="https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上传后自动替换链接</p><h3 id="替换文件引用链接" tabindex="-1"><a class="header-anchor" href="#替换文件引用链接"><span>替换文件引用链接</span></a></h3><p>重新读取 <code>attachments.md</code>，获取图片名与图床链接的对应关系并存储为字典：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> re
 ​
 <span class="token comment"># 定义正则表达式模式</span>
 pattern <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[(.*?)\\]\\((.*?)\\)&#39;</span>
 ​
 <span class="token comment"># 以utf-8编码读取attachments.md文件</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;attachments.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
     content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
 <span class="token comment"># 创建空字典</span>
 img_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 ​
 <span class="token comment"># 使用正则表达式匹配并存储图片信息到字典中</span>
 matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> matches<span class="token punctuation">:</span>
     img_name <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
     img_link <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
     img_dict<span class="token punctuation">[</span>img_name<span class="token punctuation">]</span> <span class="token operator">=</span> img_link
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要来遍历整个 Vault 并进行图片引用链接的替换，首先需要注意的是 Obsidian 存在两种引用内部图片的格式：</p><ul><li>OB 链接：<code>![[img.png]]</code></li><li>MD 链接：<code>![img_name](img.png)</code></li></ul><p>两种格式我们都需要进行替换：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> os
 <span class="token keyword">import</span> re
 ​
 <span class="token comment"># 定义正则表达式模式</span>
 pattern1 <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[(.*?)\\]\\((.*?)\\.(png|jpg|jpeg)\\)&#39;</span>
 pattern2 <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[\\[(.*?)\\.(png|jpg|jpeg)\\]\\]&#39;</span>
 ​
 <span class="token comment"># 遍历当前文件夹下的所有Markdown文件</span>
 <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>
         <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
             <span class="token comment"># 以utf-8编码读取Markdown文件</span>
             file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
             <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                 content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
             <span class="token comment"># 使用正则表达式替换图片链接</span>
             content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> <span class="token keyword">lambda</span> <span class="token keyword">match</span><span class="token punctuation">:</span> <span class="token string">&#39;![{}]({})&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
             content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> <span class="token keyword">lambda</span> <span class="token keyword">match</span><span class="token punctuation">:</span> <span class="token string">&#39;![{}]({})&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
 ​
             <span class="token comment"># 将替换后的内容写回Markdown文件</span>
             <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                 f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完脚本，我们会发现 Vault 内所有的内部图片都转换成了图床链接的形式。</p><figure><img src="https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前后对比</p><p>最后再强调一遍，<strong>执行以上操作前务必做好备份！以防操作失误无法挽回！</strong></p><p>出处：https://zhuanlan.zhihu.com/p/646068563</p>`,30),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","picGo-integrated-Obsidian.html.vue"]]),k=JSON.parse('{"path":"/notes/picGo-integrated-Obsidian.html","title":"Obsidian本地图片通过picGo上传图床","lang":"zh-CN","frontmatter":{"title":"Obsidian本地图片通过picGo上传图床","icon":"pic","order":2,"category":["安装教程"],"tag":["Obsidian","picGo"],"description":"效果综述 目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 890 Attachments 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是方便跨文件引用以及安全隐私。但存在的弊端也很明显：随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦。这时可以考虑 webp 化或者干...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/picGo-integrated-Obsidian.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Obsidian本地图片通过picGo上传图床"}],["meta",{"property":"og:description","content":"效果综述 目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 890 Attachments 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是方便跨文件引用以及安全隐私。但存在的弊端也很明显：随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦。这时可以考虑 webp 化或者干..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-13T20:32:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Obsidian本地图片通过picGo上传图床"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:tag","content":"picGo"}],["meta",{"property":"article:modified_time","content":"2024-02-13T20:32:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Obsidian本地图片通过picGo上传图床\\",\\"image\\":[\\"https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp\\",\\"https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp\\"],\\"dateModified\\":\\"2024-02-13T20:32:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"效果综述","slug":"效果综述","link":"#效果综述","children":[]},{"level":3,"title":"上传图片","slug":"上传图片","link":"#上传图片","children":[]},{"level":3,"title":"替换文件引用链接","slug":"替换文件引用链接","link":"#替换文件引用链接","children":[]}],"git":{"createdTime":1707856372000,"updatedTime":1707856372000,"contributors":[{"name":"Shenb","email":"shenbourne@163.com","commits":1}]},"readingTime":{"minutes":3.04,"words":911},"filePathRelative":"notes/picGo-integrated-Obsidian.md","localizedDate":"2024年2月13日","excerpt":"<h3>效果综述</h3>\\n<p>目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹&nbsp;<code>890 Attachments</code>&nbsp;内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是<strong>方便跨文件引用以及安全隐私</strong>。但存在的弊端也很明显：<strong>随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦</strong>。这时可以考虑 webp 化或者干脆直接图床化。</p>\\n<p>刚好有朋友遇到这个问题，需要将 Vault 里的全部本地图片转为图床链接，解决思路的话比较清晰，相信大家都能想得到：</p>","autoDesc":true}');export{d as comp,k as data};
