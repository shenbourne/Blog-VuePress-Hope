import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as p,e as s,a as n,f as a}from"./app-mUzxrbjt.js";const o={},i=n("h2",{id:"paste-image-rename-obsidian本地图片通过picgo上传图床",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#paste-image-rename-obsidian本地图片通过picgo上传图床"},[n("span",null,"“Paste image rename”：Obsidian本地图片通过picGo上传图床")])],-1),c=a(`<h3 id="_1-效果综述" tabindex="-1"><a class="header-anchor" href="#_1-效果综述"><span>1. 效果综述</span></a></h3><p>目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 <code>890 Attachments</code> 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是<strong>方便跨文件引用以及安全隐私</strong>。但存在的弊端也很明显：<strong>随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦</strong>。这时可以考虑 webp 化或者干脆直接图床化。</p><p>刚好有朋友遇到这个问题，需要将 Vault 里的全部本地图片转为图床链接，解决思路的话比较清晰，相信大家都能想得到：</p><ol><li>上传全部图片到图床；</li><li>替换文件引用链接。</li></ol><p>那就以一个示例文件夹 <code>ob</code> 为例，尝试实现所有图片的图床化。</p><h3 id="_2-上传图片" tabindex="-1"><a class="header-anchor" href="#_2-上传图片"><span>2. 上传图片</span></a></h3><p>这里我们需要借助一个插件：<strong>“Image auto upload”</strong>，可以将图片上传到 PicGo 中配置的图床。</p><figure><img src="https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>若勾选最后一个选项，图片上传图床后会被删除！！！</p><p>虽然插件只能上传一个文件中的所有图像文件，但也足够让我们打开思路了：<strong>那就把图片都丢到一个文件里</strong>！</p><p>文件夹内创建文件 <code>attachments.md</code>，运行这段 python 脚本：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> os
 <span class="token keyword">import</span> glob
 ​
 <span class="token comment"># 获取当前目录</span>
 current_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
 <span class="token comment"># 获取所有图片文件路径</span>
 image_files <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \\
               glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.jpeg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \\
               glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_dir<span class="token punctuation">,</span> <span class="token string">&#39;*.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可根据需要添加其他图片格式的glob语句</span>
 ​
 <span class="token comment"># 遍历图片文件，并将文件名添加到attachments.md文件中</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;attachments.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
     <span class="token keyword">for</span> image_file <span class="token keyword">in</span> image_files<span class="token punctuation">:</span>
         image_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span>
         <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;![[</span><span class="token interpolation"><span class="token punctuation">{</span>image_filename<span class="token punctuation">}</span></span><span class="token string">]]\\n&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后会得到以下效果：</p><figure><img src="https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图片汇总</p><p>然后回到 Obsidian 按 <code>Ctrl-P</code> 调出命令面板，执行 <code>Image auto upload Plugin: Upload all images</code> 后会自动替换成图床链接：</p><figure><img src="https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上传后自动替换链接</p><h3 id="_3-替换文件引用链接" tabindex="-1"><a class="header-anchor" href="#_3-替换文件引用链接"><span>3. 替换文件引用链接</span></a></h3><p>重新读取 <code>attachments.md</code>，获取图片名与图床链接的对应关系并存储为字典：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> re
 ​
 <span class="token comment"># 定义正则表达式模式</span>
 pattern <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[(.*?)\\]\\((.*?)\\)&#39;</span>
 ​
 <span class="token comment"># 以utf-8编码读取attachments.md文件</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;attachments.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
     content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
 <span class="token comment"># 创建空字典</span>
 img_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 ​
 <span class="token comment"># 使用正则表达式匹配并存储图片信息到字典中</span>
 matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> matches<span class="token punctuation">:</span>
     img_name <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
     img_link <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
     img_dict<span class="token punctuation">[</span>img_name<span class="token punctuation">]</span> <span class="token operator">=</span> img_link
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要来遍历整个 Vault 并进行图片引用链接的替换，首先需要注意的是 Obsidian 存在两种引用内部图片的格式：</p><ul><li>OB 链接：<code>![[img.png]]</code></li><li>MD 链接：<code>![img_name](img.png)</code></li></ul><p>两种格式我们都需要进行替换：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token keyword">import</span> os
 <span class="token keyword">import</span> re
 ​
 <span class="token comment"># 定义正则表达式模式</span>
 pattern1 <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[(.*?)\\]\\((.*?)\\.(png|jpg|jpeg)\\)&#39;</span>
 pattern2 <span class="token operator">=</span> <span class="token string">r&#39;\\!\\[\\[(.*?)\\.(png|jpg|jpeg)\\]\\]&#39;</span>
 ​
 <span class="token comment"># 遍历当前文件夹下的所有Markdown文件</span>
 <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>
         <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
             <span class="token comment"># 以utf-8编码读取Markdown文件</span>
             file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
             <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                 content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
 ​
             <span class="token comment"># 使用正则表达式替换图片链接</span>
             content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> <span class="token keyword">lambda</span> <span class="token keyword">match</span><span class="token punctuation">:</span> <span class="token string">&#39;![{}]({})&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
             content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> <span class="token keyword">lambda</span> <span class="token keyword">match</span><span class="token punctuation">:</span> <span class="token string">&#39;![{}]({})&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
 ​
             <span class="token comment"># 将替换后的内容写回Markdown文件</span>
             <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                 f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完脚本，我们会发现 Vault 内所有的内部图片都转换成了图床链接的形式。</p><figure><img src="https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前后对比</p><p>最后再强调一遍，<strong>执行以上操作前务必做好备份！以防操作失误无法挽回！</strong></p>`,29),l=n("h2",{id:"remotely-save-本地和云端同步文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#remotely-save-本地和云端同步文件"},[n("span",null,"“Remotely save”：本地和云端同步文件")])],-1),u=a('<h3 id="_1-效果综述-1" tabindex="-1"><a class="header-anchor" href="#_1-效果综述-1"><span>1. 效果综述</span></a></h3><p>本地和云之间同步笔记。</p><ul><li>支持黑曜石移动版。保管库可以在移动和桌面设备之间同步，云服务作为“代理”。</li><li>支持端到端加密。如果用户指定密码，文件将在发送到云之前使用 openssl 格式进行加密。</li><li>支持定时自动同步。您还可以使用侧边栏功能区或使用命令面板中的命令手动触发同步（甚至可以将热键组合绑定到命令，然后按热键组合）。</li></ul><h3 id="_2-配置插件" tabindex="-1"><a class="header-anchor" href="#_2-配置插件"><span>2. 配置插件</span></a></h3><p>在应用商店下载 <strong>“Remotely save”</strong>，启动插件后进行插件配置。</p><p><strong>“选择远程服务”</strong> 选择 <strong>“S3或兼容S3的服务”</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202407142051685.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>打开 Bucket 预览页面</p><figure><img src="https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202407140125160.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>“服务地址（Endpoint）”</strong> 和 <strong>“区域（Region）”</strong> 分别是 <strong>“外网访问”</strong> 节点和 <strong>“ECS的经典网络访问”</strong> 节点</p><p><strong>“Access Key ID”</strong> 、<strong>“Secret Access Key”</strong> 分别是在上文 <strong>&#39;阿里云OSS/授权设置&quot;</strong> 中创建子账号后， 自己记录下来的 <strong>&quot;AccessKey ID&quot;</strong> 和 <strong>&quot;AccessKey Scret</strong></p><p><strong>&quot;存储桶（Bucket）&quot;</strong> 对应阿里云 OSS 内的 bucket 名字</p>',12);function r(d,k){return e(),p("div",null,[i,s(" #region PasteImageRename "),c,s(" #endregion PasteImageRename "),l,s(" #region RemotelySave "),u,s(" #endregion RemotelySave ")])}const b=t(o,[["render",r],["__file","Obsidian-Plugins.html.vue"]]),v=JSON.parse('{"path":"/appendix/Obsidian-Plugins.html","title":"Obsidian插件","lang":"zh-CN","frontmatter":{"title":"Obsidian插件","icon":"pic","order":2,"category":["安装教程"],"tag":["Obsidian","picGo"],"cover":"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202409300158761.png","description":"“Paste image rename”：Obsidian本地图片通过picGo上传图床 1. 效果综述 目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 890 Attachments 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是方便跨文件引用以及安全隐私。但存在的弊端也很明显：...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/appendix/Obsidian-Plugins.html"}],["meta",{"property":"og:site_name","content":"ShenBourne"}],["meta",{"property":"og:title","content":"Obsidian插件"}],["meta",{"property":"og:description","content":"“Paste image rename”：Obsidian本地图片通过picGo上传图床 1. 效果综述 目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹 890 Attachments 内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是方便跨文件引用以及安全隐私。但存在的弊端也很明显：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202409300158761.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-03T06:33:51.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Obsidian插件"}],["meta",{"property":"article:author","content":"ShenBourne"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:tag","content":"picGo"}],["meta",{"property":"article:modified_time","content":"2024-10-03T06:33:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Obsidian插件\\",\\"image\\":[\\"https://pic2.zhimg.com/80/v2-331c4279a55a99ab3692fe8dc4ad8475_1440w.webp\\",\\"https://pic1.zhimg.com/80/v2-bcc89b9880e2fdcafd476d758fe372a8_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-f45acd103c8ffbb0aea543bc672427e2_1440w.webp\\",\\"https://pic3.zhimg.com/80/v2-2c6afcf09490201540c5937b5c23d332_1440w.webp\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202407142051685.png\\",\\"https://cdn.jsdelivr.net/gh/shenbourne/Image-Hosting-Service@main/blog/202407140125160.png\\"],\\"dateModified\\":\\"2024-10-03T06:33:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ShenBourne\\",\\"url\\":\\"https://blog.shenbourne.com\\"}]}"]]},"headers":[{"level":2,"title":"“Paste image rename”：Obsidian本地图片通过picGo上传图床","slug":"paste-image-rename-obsidian本地图片通过picgo上传图床","link":"#paste-image-rename-obsidian本地图片通过picgo上传图床","children":[{"level":3,"title":"1. 效果综述","slug":"_1-效果综述","link":"#_1-效果综述","children":[]},{"level":3,"title":"2. 上传图片","slug":"_2-上传图片","link":"#_2-上传图片","children":[]},{"level":3,"title":"3. 替换文件引用链接","slug":"_3-替换文件引用链接","link":"#_3-替换文件引用链接","children":[]}]},{"level":2,"title":"“Remotely save”：本地和云端同步文件","slug":"remotely-save-本地和云端同步文件","link":"#remotely-save-本地和云端同步文件","children":[{"level":3,"title":"1. 效果综述","slug":"_1-效果综述-1","link":"#_1-效果综述-1","children":[]},{"level":3,"title":"2. 配置插件","slug":"_2-配置插件","link":"#_2-配置插件","children":[]}]}],"git":{"createdTime":1720956474000,"updatedTime":1727937231000,"contributors":[{"name":"shenbourne","email":"shenbourne@163.com","commits":4}]},"readingTime":{"minutes":4.07,"words":1220},"filePathRelative":"appendix/Obsidian-Plugins.md","localizedDate":"2024年7月14日","excerpt":"<h2>“Paste image rename”：Obsidian本地图片通过picGo上传图床</h2>\\n<!-- #region PasteImageRename -->\\n<h3>1. 效果综述</h3>\\n<p>目前我的主力笔记软件是[[Obsidian]]，配图都是统一存放在同一文件夹&nbsp;<code>890 Attachments</code>&nbsp;内，使用[[Paste image rename]]使其与所引用的元文件名称一致，优点是<strong>方便跨文件引用以及安全隐私</strong>。但存在的弊端也很明显：<strong>随着文件数量增多会导致内存占用过大不利于跨平台同步以及迁移麻烦</strong>。这时可以考虑 webp 化或者干脆直接图床化。</p>","autoDesc":true}');export{b as comp,v as data};
